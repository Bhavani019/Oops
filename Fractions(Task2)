Input:
[43, 23]

Output:
True
43/23

--------------------------------------------------------------------------------------------------------------------------

class Fraction(object):
    def __init__(self,numerator,denominator):
        #self._numerator = numerator
        #self._denominator = denominator
        if numerator<0 and denominator<0:
            self._numerator = abs(int(numerator))
            self._denominator = abs(int(denominator))
        elif denominator<0:
            self._numerator = -(int(numerator))
            self._denominator = abs(int(denominator))
        else:
            self._numerator = int(numerator)
            self._denominator = int(denominator)
            
        for i in range(1,self._denominator+1):
            if self._numerator%i==0 and self._denominator%i==0:
                k=i
        self._numerator = self._numerator//k
        self._denominator = self._denominator//k
        
    @property
    def numerator(self):
        return self._numerator
        
    @property
    def denominator(self):
        return self._denominator
    
    
if __name__ == "__main__":
    import json

    input_args = list(json.loads(input()))

    fraction_one = Fraction(*input_args)

    try:
        fraction_one._numerator
    except AttributeError:
        print("Missed protecting numerator")

    try:
        fraction_one._denominator
    except AttributeError:
        print("Missed protecting denominator")

    try:
        fraction_one.numerator = 1
        print("Missed setting safe access to numerator")
    except AttributeError:
        pass

    try:
        fraction_one.denominator = 1
        print("Missed setting safe access to numerator")
    except AttributeError:
        pass

    print(isinstance(fraction_one, Fraction))
    print(str(fraction_one.numerator) + '/' + str(fraction_one.denominator))
