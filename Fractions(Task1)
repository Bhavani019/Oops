Input:
[1, 2]

Output:
True
1
2

------------------------------------------------------------------------------------------------------------------------

class Fraction:
    def __init__(self,numerator = 0,denominator=0):
        if numerator<0 and denominator<0:
            self._numerator = abs(int(numerator))
            self._denominator = abs(int(denominator))
        elif denominator<0:
            self._numerator = -(int(numerator))
            self._denominator = abs(int(denominator))
        else:
            self._numerator = int(numerator)
            self._denominator = int(denominator)
            
        for i in range(1,self._denominator+1):
            if self._numerator%i==0 and self._denominator%i==0:
                k=i
        self._numerator = self._numerator//k
        self._denominator = self._denominator//k
        
        
        '''for i in range(1,20):
            if self._numerator%i==0 and self._denominator%i==0:
                self._numerator = self._numerator//i
                self._denominator = self._denominator//i'''
        
    @property
    def numerator(self):
            return self._numerator
        
    @property
    def denominator(self):
            return self._denominator
            
        

if __name__ == "__main__":
    import json

    input_args = list(json.loads(input()))

    fraction = Fraction(*input_args)

    try:
        fraction._numerator
    except AttributeError:
        print("Missed protecting numerator")

    try:
        fraction._denominator
    except AttributeError:
        print("Missed protecting denominator")

    try:
        fraction.numerator = 1
        print("Missed setting safe access to numerator")
    except AttributeError:
        pass

    try:
        fraction.denominator = 1
        print("Missed setting safe access to numerator")
    except AttributeError:
        pass

    print(isinstance(fraction, Fraction))
    print(fraction.numerator)
    print(fraction.denominator)
